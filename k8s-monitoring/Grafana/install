## ADD, UPDATE AND INSTALL using Helm:

helm repo add grafana https://grafana.github.io/helm-charts 

helm repo update

helm install grafana grafana/grafana --namespace=grafana

## Get your 'admin' user password by running:

kubectl get secret --namespace grafana grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo

## Expose Prometheus Service

kubectl expose service grafana --type=NodePort --target-port=3000 --name=grafana-ext

## in order to connect Grafana's DataSource to Prometheus, we put in the HTTP URL:
http://host.docker.internal:30563 

## Explanation:

The localhost of one container is not the localhost of another container, even if you published the port to the host â€“ you can't reach the Prometheus container or the host using localhost from the Grafana container. You need to use the IP address of the Prometheus container, or the hostname if you are using Docker Compose.


When accessing services running within a Docker container from the host machine, the hostname localhost may not work as expected. This is because the containerized application is running in a separate network namespace and has its own network stack, separate from the host machine.

In the case of Grafana running on your host machine and attempting to connect to Prometheus running in a Docker container, using http://localhost:30563 may not resolve correctly because localhost refers to the network interface of the host machine itself, not the Docker container.

However, the hostname host.docker.internal is a special DNS name provided by Docker that resolves to the IP address of the host machine from within the container. By using http://host.docker.internal:30563, Grafana can correctly route the request to the Prometheus instance running in the Docker container.

By using host.docker.internal, you are effectively bypassing the container's network namespace and accessing the service as if it were running on the host machine. This allows Grafana to establish a successful connection to Prometheus.

It's important to note that the host.docker.internal hostname is specific to Docker for Mac and Docker for Windows. On Linux, you can typically use the IP address of the host machine directly.

In summary, when accessing services running in Docker containers from the host machine, using localhost may not work as expected, but using host.docker.internal (on Docker for Mac and Docker for Windows) or the host machine's IP address (on Linux) can help establish the connection successfully.






